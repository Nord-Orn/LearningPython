s1 = 'Skill'
s2 = 'box'
s3 = s1 + s2
print(s3)  # Skillbox
s3 = s2 + s1
print(s3)  # boxSkill
# =============================================================
# Вычтем часть "box" из строки "Skillbox"
s1 = 'Skillbox'
s2 = 'box'
s3 = s1.replace(s2, '')  # Передаём методу два аргумента — то, что хотим убрать
# из строки, и то, на что планируем заменить удалённый фрагмент
print(s3)  # Skill
# =============================================================
st = 'ab ' * 6
print(st)  # ab ab ab ab ab ab
st = '-' * 30
print(st)  # ------------------------------
# =============================================================
s1 = 'Иван Иванов'
s2 = 'Иван'

if s2 in s1:  # Проверяем, есть ли «содержимое» строки s2 в s1
    print('Пользователь Иван есть в базе данных')  # Пользователь Иван есть в базе данных
else:
    print('Пользователь Иван в базе данных отсутствует')
# =============================================================
st = 'a'

if st in 'abcd':
    print('YES')  # YES
# =============================================================
# Oпределить длину строки.
ln = len('Skillbox')
print(ln)  # 8
s1 = 'skill'
print(len(s1))  # 5
# =============================================================
# Pаспечатать символы по их индексу.
st = 'Skillbox'
print(st[0])  # S
print(st[2])  # i
print(st[-3])  # b
# =============================================================
# Срез строки
# --------------------------------------------------------------
st = 'Skillbox'  # слово из 8 символов индексы (с 0 до 7)
print(st[0:3])  # Ski
print(st[2:5])  # ill
print(st[4:7])  # lbo
print(st[:6])  # Skillb Срез с начала строки до 6 символа
print(st[5:])  # box Срез с 6 символа до конца строки
print(st[:])  # Skillbox Целая строка
print(st[:10])  # Skillbox за пределами индексов - целая строка
print(st[2:2])  # Пустая строка т.к. конечный индекс равен начальному
print(st[5:3])  # Пустая строка т.к. конечный индекс меньше начального
print(st[-7:-4])  # kil # Всё сработало как надо.# Срез с отрицательными индексами
print(st[-4:-4])  # Возврат пустой строки, так как начальный индекс равен конечному
print(st[-4:])  # lbox #Всё сработало как надо. #Срез до конца строки
print(st[:-3])  # Skill Срез с начала строки
print(st[-7:4])  # kil Срез с положительным и отрицательным индексами
st = 'Skillbox'
print(st[0:7:2])  # Silo - срез с шагом 2
print(st[6:1:-2])  # oli - срез с шагом 2 d в обраьную сторону
st = 'шорох'
print(st[::-1])  # хорош - Шаг -1 дает реверсное написание текста.
# =============================================================
# Наиболее популярные из методов и функций строк.
# --------------------------------------------------------------
# Методы поиска подстроки S.find(str, [start], [end]) и S.rfind(str, [start], [end])
s = 'SkillboxSkillbox'
str = 'box'
print(s.find(str))  # 5 - Возвращает индекс первого совпавшего значения подстроки
print(s.rfind(str))  # 13 - Возвращает индекс последнего совпавшего значения подстроки
print(s.rfind('abc'))  # -1 - Если подстроки в строке нет, Python возвращает −1
S = 'Skillbox'
str = 'box'
print(S.find(str, 0, 7))  # -1 - Здесь подстрока str ищется в срезе S[0:7].
# Так как правая граница в срез не включается, Python не находит подстроку и выдаёт −1.
# --------------------------------------------------------------
# Методы преобразования символов строки в верхний и нижний регистры
# S.upper() — преобразование всех символов строки S в верхний регистр.
# S.lower() — преобразование всех символов строки S в нижний регистр.
S = 'Skillbox 23'
print(S.upper())  # SKILLBOX 23
print(S.lower())  # skillbox 23
print(S)  # Skillbox 23 - Исходная строка не меняется
# --------------------------------------------------------------
# Методы rjust() и ljust():
S = 'Hi!'
print(S.rjust(10, '*'))  # *******Hi! - Увеличивает длину строки
# до 10 и заполняет пробелы слева символами '*'
print(S.ljust(10, '*'))  # Hi!******* - Увеличивает длину строки
# до 10 и заполняет пробелы справа символами '*'
# --------------------------------------------------------------
# S.count(t) - Возвращает количество непересекающихся вхождений
# подстроки t в строку S. То есть метод начинает искать следующую подстроку
# строго после окончания предыдущей.
st = 'опрст/опрст/опрст'
s = 'опрст'
print(st.count('опрст'))  # 3 - повторения
# --------------------------------------------------------------
# S.isdigit() - Проверяет, состоит ли строка из цифр.
# Если да, возвращает True, иначе — False
st = 'Я  живу в Мурманске c 1974.'
print(st.isdigit())  # False
st = '1259566977469'
print(st.isdigit())  # True
# --------------------------------------------------------------
# S.lstrip([символ]) - Удаляет определённые символы в начале строки.
# Здесь [символ] — необязательный аргумент. Если он не задан, метод удаляет пробелы
# S.rstrip([символ])	- Удаляет определённые символы в конце строки.
# Здесь [символ] — необязательный аргумент. Если он не задан, метод удаляет пробелы
st = 'опрст/опрст/опрст'
print(st.lstrip('опрс'))  # т/опрст/опрст
print(st.rstrip('прст'))  # опрст/опрст/о
# --------------------------------------------------------------
# chr(число) - Преобразует код ASCII в символ
print(chr(89))  # Y
# --------------------------------------------------------------
# ord(символ) - Преобразует символ в его код ASCII
print(ord('Y'))  # Y
# --------------------------------------------------------------
# sorted(строка) - Сортирует символы строки в порядке возрастания их номеров в таблице ASCII
st = 'dsjyblouk'
print(sorted(st))  # ['b', 'd', 'j', 'k', 'l', 'o', 's', 'u', 'y']
# =================================================================
